#!/usr/bin/env bun
// @bun
import chalk from"chalk";import ora from"ora";import child_process from"child_process";import figlet from"figlet";import fs from"fs";var{$}=globalThis.Bun;var wait=function(ms){return new Promise((resolve)=>setTimeout(resolve,ms))};var projectName="my-probun-app";var templateName;var templates=[{name:"default",url:"https://github.com/lassejlv/probun-clean-template"},{name:"frogdb",url:"https://github.com/lassejlv/probun-template-frogdb"},{name:"advanced",url:"https://github.com/benjamint08/probun-example"}];if(process.argv.length<3){console.log(chalk.red("Please provide a project name"));process.exit(1)}projectName=process.argv[2];var args=process.argv.slice(2);var templateIndex=args.findIndex((arg)=>arg==="--template");var withPrisma=args.includes("--with-prisma");if(templateIndex!==-1){templateName=args[templateIndex+1]}if(!templateName){templateName="default"}else if(templateName==="frogdb"){templateName="frogdb"}else if(!templates.find((t)=>t.name===templateName)){console.log(chalk.red(`Template ${templateName} not found`));process.exit(1)}if(fs.existsSync(projectName)){console.log(chalk.red("Directory already exists"));process.exit(1)}figlet("Probun",(err,data)=>{if(err){console.error("Something went wrong...");console.dir(err);return}console.log(`\n\n${chalk.bold(data)}\n\n`)});wait(1000);var gitInstallSpinner=ora(chalk.bold("Checking if git is installed...")).start();var gitInstalled=false;wait(1000);try{child_process.execSync("git --version",{stdio:"ignore"});gitInstalled=true}catch(e){gitInstallSpinner.fail("Git is not installed")}if(gitInstalled){gitInstallSpinner.succeed("Git is installed");const loadingSpinner=ora(chalk.bold("Setting up your project...")).start();try{const gitUrl=templates.find((t)=>t.name===templateName)?.url;child_process.execSync(`git clone ${gitUrl} ${projectName?projectName:"probun-app"}`,{stdio:"ignore"});loadingSpinner.succeed("Project setup complete");const installSpinner=ora(chalk.bold("Installing dependencies...")).start();child_process.execSync(`cd ${projectName?projectName:"probun-app"} && bun install`,{stdio:"ignore"});installSpinner.succeed("Dependencies installed");if(withPrisma){const prismaSpinner=ora("Setting up Prisma...").start();await $`cd ${projectName?projectName:"probun-app"} && bunx prisma init --datasource-provider=sqlite`;prismaSpinner.succeed("Prisma setup complete")}console.log(chalk.bold("\n\nNext steps:"));console.log(chalk.green(`1. cd ${projectName?projectName:"probun-app"}`));console.log(chalk.green("2. bun dev"));console.log(chalk.green("3. Used template: "+templateName));if(withPrisma){console.log(chalk.green('4. Prisma setup complete, run "bunx prisma db push" to get started with your database'))}console.log(chalk.bold(`\n${chalk.yellow("\u26A1\uFE0F")}Read the documentation at https://probun.dev`));process.exit(0)}catch(error){console.log(error);loadingSpinner.fail("Failed to setup project, did you provide valid syntax in the command?");process.exit(1)}}
